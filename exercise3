#include <iostream>
using namespace std;

struct Node {
    char data;
    Node* next;
    Node(char value) : data(value), next(nullptr) {}
};

struct LinkedList {
    Node* head;
    LinkedList() : head(nullptr) {}

    void insert(char value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
        }
        else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void display() {
        Node* temp = head;
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};


LinkedList concatenate(LinkedList& list1, LinkedList& list2) {
    LinkedList result;
    Node* temp = list1.head;
    while (temp) {
        result.insert(temp->data);
        temp = temp->next;
    }
    temp = list2.head;
    while (temp) {
        result.insert(temp->data);
        temp = temp->next;
    }
    return result;
}

LinkedList intersection(LinkedList& list1, LinkedList& list2) {
    LinkedList result;
    Node* temp1 = list1.head;
    while (temp1) {
        Node* temp2 = list2.head;
        while (temp2) {
            if (temp1->data == temp2->data) {
                result.insert(temp1->data);
                break;
            }
            temp2 = temp2->next;
        }
        temp1 = temp1->next;
    }
    return result;
}


int compare(LinkedList& list1, LinkedList& list2) {
    Node* temp1 = list1.head;
    Node* temp2 = list2.head;
    while (temp1 && temp2) {
        if (temp1->data < temp2->data) return -1;
        if (temp1->data > temp2->data) return 1;
        temp1 = temp1->next;
        temp2 = temp2->next;
    }
    if (!temp1 && !temp2) return 0;
    return temp1 ? 1 : -1;
}

int main() {
    LinkedList list1, list2;

    list1.insert('a');
    list1.insert('b');
    list1.insert('c');

    list2.insert('b');
    list2.insert('c');
    list2.insert('d');

    LinkedList concatenatedList = concatenate(list1, list2);
    cout << "Concatenated List: ";
    concatenatedList.display();

    LinkedList intersectionList = intersection(list1, list2);
    cout << "Intersection List: ";
    intersectionList.display();

    int comparisonResult = compare(list1, list2);
    cout << "Comparison Result: " << comparisonResult << endl;

    return 0;
}
